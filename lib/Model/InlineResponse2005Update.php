<?php
/**
 * InlineResponse2005Update
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChatApiWhatsApp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Chat API SDK
 *
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChatApiWhatsApp\Model;

use \ArrayAccess;
use \ChatApiWhatsApp\ObjectSerializer;

/**
 * InlineResponse2005Update Class Doc Comment
 *
 * @category Class
 * @description An object that lists the fields changed in the request
 * @package  ChatApiWhatsApp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse2005Update implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_5_update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'webhookUrl' => 'string',
        'ackNotificationsOn' => 'bool',
        'chatUpdateOn' => 'bool',
        'videoUploadOn' => 'bool',
        'proxy' => 'string',
        'guaranteedHooks' => 'bool',
        'ignoreOldMessages' => 'bool',
        'processArchive' => 'bool',
        'instanceStatuses' => 'bool',
        'webhookStatuses' => 'bool',
        'statusNotificationsOn' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'webhookUrl' => null,
        'ackNotificationsOn' => null,
        'chatUpdateOn' => null,
        'videoUploadOn' => null,
        'proxy' => null,
        'guaranteedHooks' => null,
        'ignoreOldMessages' => null,
        'processArchive' => null,
        'instanceStatuses' => null,
        'webhookStatuses' => null,
        'statusNotificationsOn' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'webhookUrl' => 'webhookUrl',
        'ackNotificationsOn' => 'ackNotificationsOn',
        'chatUpdateOn' => 'chatUpdateOn',
        'videoUploadOn' => 'videoUploadOn',
        'proxy' => 'proxy',
        'guaranteedHooks' => 'guaranteedHooks',
        'ignoreOldMessages' => 'ignoreOldMessages',
        'processArchive' => 'processArchive',
        'instanceStatuses' => 'instanceStatuses',
        'webhookStatuses' => 'webhookStatuses',
        'statusNotificationsOn' => 'statusNotificationsOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'webhookUrl' => 'setWebhookUrl',
        'ackNotificationsOn' => 'setAckNotificationsOn',
        'chatUpdateOn' => 'setChatUpdateOn',
        'videoUploadOn' => 'setVideoUploadOn',
        'proxy' => 'setProxy',
        'guaranteedHooks' => 'setGuaranteedHooks',
        'ignoreOldMessages' => 'setIgnoreOldMessages',
        'processArchive' => 'setProcessArchive',
        'instanceStatuses' => 'setInstanceStatuses',
        'webhookStatuses' => 'setWebhookStatuses',
        'statusNotificationsOn' => 'setStatusNotificationsOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'webhookUrl' => 'getWebhookUrl',
        'ackNotificationsOn' => 'getAckNotificationsOn',
        'chatUpdateOn' => 'getChatUpdateOn',
        'videoUploadOn' => 'getVideoUploadOn',
        'proxy' => 'getProxy',
        'guaranteedHooks' => 'getGuaranteedHooks',
        'ignoreOldMessages' => 'getIgnoreOldMessages',
        'processArchive' => 'getProcessArchive',
        'instanceStatuses' => 'getInstanceStatuses',
        'webhookStatuses' => 'getWebhookStatuses',
        'statusNotificationsOn' => 'getStatusNotificationsOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['webhookUrl'] = isset($data['webhookUrl']) ? $data['webhookUrl'] : null;
        $this->container['ackNotificationsOn'] = isset($data['ackNotificationsOn']) ? $data['ackNotificationsOn'] : null;
        $this->container['chatUpdateOn'] = isset($data['chatUpdateOn']) ? $data['chatUpdateOn'] : null;
        $this->container['videoUploadOn'] = isset($data['videoUploadOn']) ? $data['videoUploadOn'] : null;
        $this->container['proxy'] = isset($data['proxy']) ? $data['proxy'] : null;
        $this->container['guaranteedHooks'] = isset($data['guaranteedHooks']) ? $data['guaranteedHooks'] : null;
        $this->container['ignoreOldMessages'] = isset($data['ignoreOldMessages']) ? $data['ignoreOldMessages'] : null;
        $this->container['processArchive'] = isset($data['processArchive']) ? $data['processArchive'] : null;
        $this->container['instanceStatuses'] = isset($data['instanceStatuses']) ? $data['instanceStatuses'] : null;
        $this->container['webhookStatuses'] = isset($data['webhookStatuses']) ? $data['webhookStatuses'] : null;
        $this->container['statusNotificationsOn'] = isset($data['statusNotificationsOn']) ? $data['statusNotificationsOn'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets webhookUrl
     *
     * @return string|null
     */
    public function getWebhookUrl()
    {
        return $this->container['webhookUrl'];
    }

    /**
     * Sets webhookUrl
     *
     * @param string|null $webhookUrl webhookUrl
     *
     * @return $this
     */
    public function setWebhookUrl($webhookUrl)
    {
        $this->container['webhookUrl'] = $webhookUrl;

        return $this;
    }

    /**
     * Gets ackNotificationsOn
     *
     * @return bool|null
     */
    public function getAckNotificationsOn()
    {
        return $this->container['ackNotificationsOn'];
    }

    /**
     * Sets ackNotificationsOn
     *
     * @param bool|null $ackNotificationsOn ackNotificationsOn
     *
     * @return $this
     */
    public function setAckNotificationsOn($ackNotificationsOn)
    {
        $this->container['ackNotificationsOn'] = $ackNotificationsOn;

        return $this;
    }

    /**
     * Gets chatUpdateOn
     *
     * @return bool|null
     */
    public function getChatUpdateOn()
    {
        return $this->container['chatUpdateOn'];
    }

    /**
     * Sets chatUpdateOn
     *
     * @param bool|null $chatUpdateOn chatUpdateOn
     *
     * @return $this
     */
    public function setChatUpdateOn($chatUpdateOn)
    {
        $this->container['chatUpdateOn'] = $chatUpdateOn;

        return $this;
    }

    /**
     * Gets videoUploadOn
     *
     * @return bool|null
     */
    public function getVideoUploadOn()
    {
        return $this->container['videoUploadOn'];
    }

    /**
     * Sets videoUploadOn
     *
     * @param bool|null $videoUploadOn videoUploadOn
     *
     * @return $this
     */
    public function setVideoUploadOn($videoUploadOn)
    {
        $this->container['videoUploadOn'] = $videoUploadOn;

        return $this;
    }

    /**
     * Gets proxy
     *
     * @return string|null
     */
    public function getProxy()
    {
        return $this->container['proxy'];
    }

    /**
     * Sets proxy
     *
     * @param string|null $proxy proxy
     *
     * @return $this
     */
    public function setProxy($proxy)
    {
        $this->container['proxy'] = $proxy;

        return $this;
    }

    /**
     * Gets guaranteedHooks
     *
     * @return bool|null
     */
    public function getGuaranteedHooks()
    {
        return $this->container['guaranteedHooks'];
    }

    /**
     * Sets guaranteedHooks
     *
     * @param bool|null $guaranteedHooks guaranteedHooks
     *
     * @return $this
     */
    public function setGuaranteedHooks($guaranteedHooks)
    {
        $this->container['guaranteedHooks'] = $guaranteedHooks;

        return $this;
    }

    /**
     * Gets ignoreOldMessages
     *
     * @return bool|null
     */
    public function getIgnoreOldMessages()
    {
        return $this->container['ignoreOldMessages'];
    }

    /**
     * Sets ignoreOldMessages
     *
     * @param bool|null $ignoreOldMessages ignoreOldMessages
     *
     * @return $this
     */
    public function setIgnoreOldMessages($ignoreOldMessages)
    {
        $this->container['ignoreOldMessages'] = $ignoreOldMessages;

        return $this;
    }

    /**
     * Gets processArchive
     *
     * @return bool|null
     */
    public function getProcessArchive()
    {
        return $this->container['processArchive'];
    }

    /**
     * Sets processArchive
     *
     * @param bool|null $processArchive processArchive
     *
     * @return $this
     */
    public function setProcessArchive($processArchive)
    {
        $this->container['processArchive'] = $processArchive;

        return $this;
    }

    /**
     * Gets instanceStatuses
     *
     * @return bool|null
     */
    public function getInstanceStatuses()
    {
        return $this->container['instanceStatuses'];
    }

    /**
     * Sets instanceStatuses
     *
     * @param bool|null $instanceStatuses instanceStatuses
     *
     * @return $this
     */
    public function setInstanceStatuses($instanceStatuses)
    {
        $this->container['instanceStatuses'] = $instanceStatuses;

        return $this;
    }

    /**
     * Gets webhookStatuses
     *
     * @return bool|null
     */
    public function getWebhookStatuses()
    {
        return $this->container['webhookStatuses'];
    }

    /**
     * Sets webhookStatuses
     *
     * @param bool|null $webhookStatuses webhookStatuses
     *
     * @return $this
     */
    public function setWebhookStatuses($webhookStatuses)
    {
        $this->container['webhookStatuses'] = $webhookStatuses;

        return $this;
    }

    /**
     * Gets statusNotificationsOn
     *
     * @return bool|null
     */
    public function getStatusNotificationsOn()
    {
        return $this->container['statusNotificationsOn'];
    }

    /**
     * Sets statusNotificationsOn
     *
     * @param bool|null $statusNotificationsOn statusNotificationsOn
     *
     * @return $this
     */
    public function setStatusNotificationsOn($statusNotificationsOn)
    {
        $this->container['statusNotificationsOn'] = $statusNotificationsOn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


